
import { useEffect, useMemo, useRef, useState } from "react";
import { db } from "../firebase";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";

import { MapContainer, TileLayer, Marker, useMapEvents } from "react-leaflet";
import L from "leaflet";
import "leaflet/dist/leaflet.css";

// ‡πÅ‡∏Å‡πâ icon ‡∏Ç‡∏≠‡∏á Leaflet (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÑ‡∏ü‡∏•‡πå)
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl:
    "https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon-2x.png",
  iconUrl:
    "https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png",
  shadowUrl:
    "https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png",
});

function CenterSync({ onCenter }) {
  // useMapEvents ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏¥‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏¢‡∏±‡∏ö/‡∏´‡∏¢‡∏∏‡∏î
  useMapEvents({
    move: (e) => {
      const c = e.target.getCenter();
      onCenter([c.lat, c.lng], false); // ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    },
    moveend: (e) => {
      const c = e.target.getCenter();
      onCenter([c.lat, c.lng], true); // ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    }
  });
  return null;
}

export default function StoreCreate({ user, onCreated, onCancel }) {
  // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏•‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  const [center, setCenter] = useState([14.8907, 102.1580]);
  const [name, setName] = useState("");
  const [address, setAddress] = useState("");
  const [open, setOpen] = useState("09:00");
  const [close, setClose] = useState("20:00");
  const [price, setPrice] = useState("‡∏ø‡∏ø");
  const [desc, setDesc] = useState("");
  const [busy, setBusy] = useState(false);
  const [err, setErr] = useState("");

  const mapRef = useRef(null);

  useEffect(() => {
    if (!navigator.geolocation) return;
    navigator.geolocation.getCurrentPosition(
      (pos) => {
        const c = [pos.coords.latitude, pos.coords.longitude];
        setCenter(c);
        // fly ‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°
        const map = mapRef.current;
        if (map) map.flyTo(c, 15, { duration: .6 });
      },
      () => {} // ignore err
    );
  }, []);

  const submit = async (e) => {
    e.preventDefault();
    setErr("");
    const [lat, lng] = center;
    if (!name) return setErr("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô");
    try {
      setBusy(true);
      const docRef = await addDoc(collection(db, "restaurants"), {
        owner_id: user.uid,
        name,
        type: "",
        latitude: lat,
        longitude: lng,
        address,
        price_range: price,
        open_time: open,
        close_time: close,
        rating: 0,
        description: desc,
        image_url: "",
        is_new: true,
        created_at: serverTimestamp(),
      });
      onCreated?.(docRef.id);
    } catch (e) {
      setErr(String(e.message || e));
    } finally {
      setBusy(false);
    }
  };

  const map = useMemo(
    () => (
      <div style={{ position: "relative", height: 320, borderRadius: 12, overflow: "hidden" }}>
        <MapContainer
          center={center}
          zoom={15}
          style={{ height: "100%", width: "100%" }}
          whenCreated={(m) => (mapRef.current = m)}
        >
          <TileLayer
            attribution='&copy; OpenStreetMap'
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          />
          {/* ‡∏°‡∏µ Marker ‡πÉ‡∏´‡πâ‡∏•‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏ä‡∏≠‡∏ö) */}
          <Marker
            draggable
            position={center}
            eventHandlers={{
              dragend: (e) => {
                const { lat, lng } = e.target.getLatLng();
                setCenter([lat, lng]);
              },
            }}
          />
          {/* ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏ö center ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà */}
          <CenterSync onCenter={(c) => setCenter(c)} />
        </MapContainer>

        {/* ‡∏Å‡∏≤‡∏Å‡∏ö‡∏≤‡∏ó‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠ (‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å "‡∏Ç‡∏¢‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏±‡∏Å") */}
        <div
          style={{
            position: "absolute", top: "50%", left: "50%",
            transform: "translate(-50%, -50%)",
            pointerEvents: "none", fontSize: 28
          }}
          title="‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡πâ‡∏≤‡∏ô"
        >
          üìç
        </div>

        {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á lat/lng */}
        <div
          style={{
            position: "absolute", bottom: 10, left: 10,
            background: "rgba(255,255,255,.9)", padding: "6px 8px",
            borderRadius: 8, fontSize: 12
          }}
        >
          lat: {center[0].toFixed(6)} ‚Ä¢ lng: {center[1].toFixed(6)}
        </div>

        {/* ‡∏õ‡∏∏‡πà‡∏° locate ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
        <button
          onClick={() => {
            if (!navigator.geolocation) return;
            navigator.geolocation.getCurrentPosition((pos) => {
              const c = [pos.coords.latitude, pos.coords.longitude];
              setCenter(c);
              mapRef.current?.flyTo(c, 16, { duration: .5 });
            });
          }}
          style={{
            position: "absolute", right: 10, bottom: 10,
            background: "#fff", border: "1px solid #ddd", borderRadius: 8,
            padding: "6px 10px"
          }}
          type="button"
        >
          ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏â‡∏±‡∏ô
        </button>
      </div>
    ),
    [center]
  );

  return (
    <div>
      <div style={{display:"flex", alignItems:"center", gap:8}}>
        <button onClick={onCancel}>‚Üê Back</button>
        <h2 style={{margin:"12px 0"}}>Create Store</h2>
      </div>

      {map}

      <form onSubmit={submit} style={{display:"grid", gap:10, maxWidth:480, marginTop:12}}>
        <input placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô" value={name} onChange={e=>setName(e.target.value)} />
        <input placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)" value={address} onChange={e=>setAddress(e.target.value)} />
        <div style={{display:"flex", gap:8}}>
          <label>‡πÄ‡∏õ‡∏¥‡∏î <input type="time" value={open} onChange={e=>setOpen(e.target.value)} /></label>
          <label>‡∏õ‡∏¥‡∏î <input type="time" value={close} onChange={e=>setClose(e.target.value)} /></label>
        </div>
        <input placeholder="‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ø ‡∏ø‡∏ø ‡∏ø‡∏ø‡∏ø" value={price} onChange={e=>setPrice(e.target.value)} />
        <textarea placeholder="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡πâ‡∏≤‡∏ô" rows={3} value={desc} onChange={e=>setDesc(e.target.value)} />

        <div style={{fontSize:12, opacity:.7}}>
          ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {center[0].toFixed(6)}, {center[1].toFixed(6)} (‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö)
        </div>

        {err && <div style={{color:"crimson"}}>{err}</div>}
        <button type="submit" disabled={busy} style={{padding:"10px 12px", borderRadius:8}}>
          {busy ? "Saving..." : "Create Store"}
        </button>
      </form>
    </div>
  );
}
